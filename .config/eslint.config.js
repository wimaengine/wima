import jsdoc from "eslint-plugin-jsdoc"
import style from "@stylistic/eslint-plugin"
import imports from "eslint-plugin-import"

export default [
    {
        plugins: {
            jsdoc,
            style,
            imports
        },
        ignores: [
            "**/*.config.js",
            "**/test/**/*.js",
            "**/*.test.js",
            "**/*.spec.js",
            "node_modules"
        ],
        languageOptions: {
            sourceType: "module"
        },
        rules: {
            "jsdoc/no-undefined-types": [
                "warn",
                {
                    disableReporting: true,
                    markVariablesAsUsed: true
                }
            ],
            "jsdoc/check-access": "error",
            "jsdoc/check-param-names": ["error",{ enableFixer: true }],
            "jsdoc/check-property-names": ["error",{ enableFixer: true }],
            "jsdoc/check-tag-names": "error",
            "jsdoc/check-types": "error",
            "jsdoc/empty-tags": "error",
            "jsdoc/implements-on-classes": "error",
            // "jsdoc/valid-types":"error",
            "jsdoc/require-jsdoc": "error",
            "jsdoc/require-param": "error",
            // "jsdoc/require-param-description":"error",
            "jsdoc/require-param-name": "error",
            "jsdoc/require-param-type": "error",
            // "jsdoc/require-returns":"error",
            "jsdoc/require-returns-check": "error",
            "jsdoc/require-yields": "error",
            "jsdoc/require-yields-check": "error",
            "jsdoc/require-throws": "error",
            // "jsdoc/require-returns-description":"error",
            "jsdoc/require-property": "error",
            "jsdoc/require-property-type": "error",
            // "jsdoc/require-property-description":"error",
            eqeqeq: "error",
            camelcase: "error",
            "prefer-const": "error",
            "new-cap": "error",
            "no-const-assign": "error",
            "no-var": "error",
            "no-object-constructor": "error",
            "no-new-wrappers": "error",
            "no-array-constructor": "error",
            "object-shorthand": ["error","always",{ "avoidQuotes": true }],
            "no-prototype-builtins": "error",
            "prefer-object-spread": "error",
            "array-callback-return": "error",
            "prefer-destructuring": ["error",{ "object": true,"array": false }],
            "prefer-template": "error",
            "no-useless-concat": "error",
            "template-curly-spacing": ["error","never"],
            "no-eval": "error",
            "no-implied-eval": "error",
            "no-useless-escape": "error",
            "func-names": ["error","as-needed"],
            "func-style": ["error","declaration",{ "allowArrowFunctions": true }],
            "no-loop-func": "error",
            "prefer-rest-params": "error",
            "prefer-spread": "error",
            "no-useless-call": "error",
            "no-unreachable": "error",
            "default-param-last": ["error"],
            "no-new-func": "error",
            "no-param-reassign": ["error",{ "props": false }],
            "prefer-arrow-callback": "error",
            "arrow-parens": "error",
            "no-confusing-arrow": "warn",
            "no-useless-constructor": "error",
            "no-dupe-class-members": "error",
            "class-methods-use-this": "off",
            "no-func-assign": "error",
            "no-duplicate-imports": "error",
            "no-class-assign": "error",
            "no-iterator": "error",
            "no-debugger": "error",

            // should be on but not here
            "no-console": "off",
            "no-alert": "warn",
            "dot-notation": "error",
            "no-undef": "off", // tsc checks this
            "no-global-assign": "error",
            "no-extend-native": "error",
            "no-redeclare": "error",
            "no-multi-assign": ["error",{ "ignoreNonDeclaration": true }],
            "no-plusplus": ["error",{ "allowForLoopAfterthoughts": true }],
            "no-unused-vars": ["error",{ vars: "local",argsIgnorePattern: "^_" }],
            "no-useless-assignment": "error",
            "no-use-before-define": ["off"],
            "no-unneeded-ternary": "error",
            "no-nested-ternary": "warn",
            "no-else-return": "error",
            "no-underscore-dangle": "error",

            /* these are for formatting */
            "semi": ["warn","never"],
            "style/new-parens": "warn",
            "style/rest-spread-spacing": ["warn","never"],
            "style/space-infix-ops": "warn",
            "style/space-unary-ops": "warn",
            "style/spaced-comment": "warn",
            "style/switch-colon-spacing": "warn",
            "style/template-curly-spacing": "warn",
            "style/template-tag-spacing": ["warn","never"],
            "style/one-var-declaration-per-line": ["warn","initializations"],
            "style/object-curly-spacing": ["warn","always"],
            "style/operator-linebreak": ["warn","after"],
            "style/nonblock-statement-body-position": ["warn","beside"],
            //"style/no-trailing-spaces": "warn",
            "style/no-multi-spaces": "warn",
            "style/no-multiple-empty-lines": "warn",
            "style/no-floating-decimal": "warn",
            "style/newline-per-chained-call": ["warn",{ ignoreChainWithDepth: 2 }],
            "style/linebreak-style": ["warn","unix"],
            "style/lines-around-comment": ["warn",{
                beforeBlockComment: true,
                afterBlockComment: false,
                beforeLineComment: true,
                afterLineComment: false,
                //allowClassStart:true
            }],
            "style/quotes": ["warn","single"],
            // "style/qoute-props": ["warn","as-needed"],
            //"style/lines-between-class-members": ["warn", "never"],
            "style/array-bracket-spacing": ["warn",{ beforeColon: false,afterColon: true,mode: "strict" }],
            "style/function-call-spacing": ["warn","never"],
            "style/line-comment-position": ["warn",{ position: "above" }],
            "style/space-before-function-paren": ["warn","never"],
            "style/eol-last": ["warn","never"],
            "style/dot-location": ["warn","property"],
            "style/array-bracket-spacing": ["warn","never"],
            "style/generator-star-spacing": ["warn",{ before: false,after: true }],
            "style/function-paren-newline": ["warn","multiline-arguments"],
            "style/array-element-newline": ["warn",{ consistent: true,"multiline": true }],
            "style/arrow-spacing": "warn",
            "style/brace-style": ["warn","1tbs",{ allowSingleLine: true }],
            "style/block-spacing": "warn",
            "style/comma-spacing": ["warn",{ before: false,after: true }],
            "style/comma-dangle": ["warn","never"],
            "style/indent": ["warn", 2],
            "style/computed-property-spacing": ["warn","never"],
            "style/padding-line-between-statements": [
                "warn",
                { blankLine: "always",prev: "for",next: "*" },
                { blankLine: "always",prev: "*",next: "for" },
                { blankLine: "always",prev: "if",next: "*" },
                { blankLine: "always",prev: "*",next: "if" },
                { blankLine: "any",prev: "if",next: "if" },
                { blankLine: "always",prev: "import",next: "*" },
                { blankLine: "never",prev: "import",next: "import" },
                { blankLine: "always",prev: ["const","let","var"],next: "*" },
                { blankLine: "any",prev: ["const","let","var"],next: ["const","let","var"] },
                { blankLine: "always",prev: "*",next: "return" },
                { blankLine: "always",prev: ["case","default"],next: "*" }
            ],
            "jsdoc/check-alignment": "warn",
            "jsdoc/check-line-alignment": "warn",
            "jsdoc/require-hyphen-before-param-description": "warn",
            "jsdoc/require-description-complete-sentence": "warn",
            "jsdoc/multiline-blocks": "warn",
            "jsdoc/require-asterisk-prefix": "warn",
            "jsdoc/no-multi-asterisks": "warn",
            //"jsdoc/no-blank-blocks": ["warn",{ enableFixer: true }],
            "jsdoc/no-blank-block-descriptions": "warn",
            "jsdoc/no-bad-blocks": "warn",
        }
    }
]